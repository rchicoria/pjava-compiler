#include "structures.h"

is_static_list* insert_static_list( is_static_list* list, is_static_list* stat );
is_static_list* insert_d_static( is_declaration* dec );
is_static_list* insert_m_static( is_method* method );
is_attribution* insert_attribution_exp( int line, char* name, is_expression *exp );
is_attribution* insert_attribution_b_exp( int line, char* name, is_b_expression *exp );
is_attribution_list* insert_attribution_list( is_attribution_list* list, is_attribution* attr );
is_statement_list* insert_as_statement( is_attribution_list* attr );
is_statement_list* insert_a_statement( is_attribution* attr );
is_statement_list* insert_d_statement( is_declaration* dec );
is_statement_list* insert_p_statement( is_print* ip);
is_statement_list* insert_i_statement( is_if* ii);
is_statement_list* insert_w_statement( is_while* iw);
is_statement_list* insert_f_statement( is_for* isf);
is_statement_list* insert_mc_statement( is_method_call* imc);
is_statement_list* insert_r_statement( is_return* ir);
is_statement_list* insert_statement_list( is_statement_list* list, is_statement_list* stts );
is_declaration* insert_declaration(int line, is_attribution_list* list, is_type type);
is_method* insert_method( int line, is_type type, char* name, is_argument_list *arg_list, is_statement_list *stt_list);
is_expression_list* insert_expression_list( is_expression_list* list, is_expression* exp );
is_expression* insert_i_expression(int line,  is_infix_expression* exp );
is_expression* insert_u_expression(int line, is_unary_expression* exp );
is_expression* insert_mc_expression(int line, is_method_call* imc );
is_expression* insert_INT(int line, int num_int );
is_expression* insert_DOUBLE(int line, double num_double );
is_expression* insert_CHAR(int line, char val_char );
is_expression* insert_VAR(int line, char* var );
is_infix_expression* insert_infix_expression( is_expression *exp1, is_operator op, is_expression *exp2 );
is_unary_expression* insert_unary_expression( is_expression* exp );
is_argument* insert_argument( is_type type, char* name );
is_argument_list* insert_argument_list( is_argument_list* list, is_argument* arg );
is_print* insert_print(int line, is_expression* exp, char end);
is_b_expression* insert_b_bool_expression(int line, char boolean  );
is_b_expression* insert_comparison(int line, is_expression* exp1, is_comparator op, is_expression* exp2);
is_b_expression* insert_b_not_expression(int line, is_b_expression* exp);
is_b_expression* insert_b_infix_expression(int line, is_b_expression* exp1, is_b_operator op, is_b_expression* exp2);
is_if* insert_if(int line, is_b_expression* exp, is_statement_list* stt, is_else* ifelse);
is_else* insert_else(int line, is_statement_list* stt);
is_while* insert_while(int line, is_b_expression* exp, is_statement_list* stt);
is_for* insert_for(int line, is_statement_list* attr, is_b_expression* ibe, is_expression* ie, is_statement_list* stt);
is_method_arg_list* insert_method_arg_list( is_method_arg_list* list, is_method_arg_list* arg );
is_method_arg_list* insert_method_arg_exp(int line, is_expression* exp);
is_method_arg_list* insert_method_arg_b_exp(int line, is_b_expression* b_exp);
is_method_call* insert_method_call(int line, char* name, is_method_arg_list* args);
is_return* insert_return_void(int line);
is_return* insert_return_exp(is_expression* exp, int line);
is_return* insert_return_b_exp(is_b_expression* exp, int line);
